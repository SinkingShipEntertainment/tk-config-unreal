# Copyright (c) 2015 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

#
# This file is one of the central points in the Shotgun Pipeline Toolkit configuration and
# a counterpart to the folder configuration structure.
#
# The folder structure underneath the project folder is used to create folders on disk -
# templates.yml (this file) refers to those folders. Therefore, the two files need to be
# in sync. This file contains an overview of all locations that are used by Sgtk.
#
# Whenever an app or an engine refers to a location on disk, it is using an entry defined in
# this file. For more information, see the Shotgun Pipeline Toolkit Documentation.



#
# The keys section contains the definitions for all the different keys that are being
# used by Sgtk. A key is a magic token that is replaced by a value at runtime, for example
# {Shot}. The section below tells Sgtk which data types and formats to expect for each key.
#
keys:
    Sequence:
        type: str
    Shot:
        type: str
    Step:
        type: str
    sg_asset_type:
        type: str
    Asset:
        type: str
    name:
        type: str
        filter_by: alphanumeric
    name_description:
        type: str
        filter_by: alphanumeric
    iteration:
        type: int
    version:
        type: int
        format_spec: "03"
    version_four:
       type: int
       format_spec: "04"
       alias: version
    timestamp:
        type: str
    width:
        type: int
    height:
        type: int
    segment_name:
        type: str
    # >>> from old sg_config
    obj_name:
        type: str
    grp_name:
        type: str
    maya_namespace:
        type: str
    # END >>> from old sg_config

    # Represents the optional output name for frames written by the Shotgun Write Node
    nuke.output:
        alias: output
        type: str
        filter_by: alphanumeric
    # >>> from old sg_config
    node:
        type: str
    # END >>> from old sg_config

    # Represents the optional output name for frames written by the After Effects Publish Rendering Plugin
    afx.comp:
        alias: comp
        type: str
        filter_by: alphanumeric
    afx.mov.ext:
        alias: extension
        type: str
        choices:
            mov: Quicktime Movie (.mov)
            avi: Audio Video Interleaved (.avi)

    SEQ:
        type: sequence
        format_spec: "04"

    # Represents a frame sequence exported from Flame
    flame.frame:
        type: sequence
        format_spec: "08"

    eye:
        type: str

    houdini.node:
        alias: node
        type: str
    aov_name:
        type: str

    # these are used by the Hiero exporter and pipeline
    YYYY:
        type: int
        format_spec: "04"
    MM:
        type: int
        format_spec: "02"
    DD:
        type: int
        format_spec: "02"
        alias: DD
    project:
        type: str

    # These are used for the Mari UDIM pipeline:
    UDIM:
        type: sequence
        default: "<UDIM>"
    mari.channel:
        type: str
        alias: channel
    mari.layer:
        type: str
        alias: layer
    mari.project_name:
        type: str
        alias: name
    asset_name:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: code
    task_name:
        type: str
        shotgun_entity_type: Task
        shotgun_field_name: content
    Task:
        type: str
    # >>> from old sg_config
    grp_name:
        type: str
    # END >>> from old sg_config

    # Maya supports two extension types.
    maya_extension:
        type: str
        choices:
            ma: Maya Ascii (.ma)
            mb: Maya Binary (.mb)
        default: ma
        alias: extension

    # needed by the Alias import as reference functionality
    alias.extension:
        type: str
        filter_by: alphanumeric

    # represents the optional render pass for frames written by VRED
    vred.render_pass:
        type: str
        filter_by: alphanumeric

    # represents the image extension for frames written by VRED
    vred.render_extension:
        type: str
        choices:
            png: PNG Image
            exr: EXR Image
        default: png

    # Represents a frame sequence exported from VRED
    vred.frame:
        type: sequence
        format_spec: "05"
        alias: SEQ

    # These are used by the Loader in Unreal
    sg_asset_type_ue4:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_type
    sg_asset_name:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: code
    sg_shot_name:
        type: str
        shotgun_entity_type: Shot
        shotgun_field_name: code
    sg_sequence_name:
        type: str
        shotgun_entity_type: Shot
        shotgun_field_name: sg_sequence

    # These are used by the Movie Publish in Unreal
    level_sequence:
        type: str
    world:
        type: str

    # >>> from old sg_config
    # reserve a template key for the maya camera name and render layer name
    maya.camera_name:
        type: str
    maya.layer_name:
        type: str

    # Define current user
    current_user_name:
        type: str
        shotgun_entity_type: HumanUser
        shotgun_field_name: login
    # END >>> from old sg_config

    # --------------------------------------- #
    # --- SSE adds below (-DW 2020-02-04) --- #
    # --------------------------------------- #
    # Natron
    natron.output:
        alias: output
        type: str
        filter_by: alphanumeric

#
# The paths section contains all the the key locations where files are to be stored
# by Sgtk Apps. Each path is made up of several keys (like {version} or {shot}) and
# these are defined in the keys section above.
#
# Apps use these paths as part of their configuration to define where on disk
# different files should go.
#
# >>> from old sg_config
# In this default configuration, all of the root_name keys will be set to 'primary'.
# This is because the default configuration stores all its production data in a single
# tree and hence uses a single root folder on disk. If you wanted to extend the
# configuration to span multiple root points, for example because you want to store
# renders on a different server, you could define an additional root in Shotgun, and
# then switch any relevant templates to point to that one instead.
# END >>> from old sg_config

paths:

    # Common  path definitions to use as shorthand in order to avoid repetitive and verbose
    # templates. This also makes it easy to change any of the common root paths and have the
    # changes apply to all templates that use them.
    #
    # These don't require the standard formatting (with definition and root_name) because they
    # will be set within each template that uses the alias.
    shot_root: sequences/{Sequence}/{Shot}/{Step}
    asset_root: assets/{sg_asset_type}/{Asset}/{Step}
    sequence_root: sequences/{Sequence}


    ##########################################################################################
    # Project level paths
    #

    #
    # Hiero
    #

    # The location of WIP files
    hiero_project_work:
        definition: 'editorial/work/{name}_v{version}.hrox'
    hiero_project_work_area:
        definition: 'editorial/work'
    # The location of backups of WIP files
    hiero_project_snapshot:
        definition: 'editorial/work/snapshots/{name}_v{version}_{timestamp}.hrox'
    # The location of published hiero files
    hiero_project_publish:
        definition: 'editorial/publish/{name}_v{version}.hrox'
    hiero_project_publish_area:
        definition: 'editorial/publish'


    ##########################################################################################
    # Sequence level paths
    #

    # >>> from old sg_config
    # additions - to add tk-maya-playblast
    maya_sequence_playblast:
        definition: '@sequence_root/to_editorial/{Shot}.mov'
        root_name: 'secondary'
    # END >>> from old sg_config

    ##########################################################################################
    # Shot level paths
    #

    #
    # Flame
    #

    flame_segment_clip:
        definition: 'sequences/{Sequence}/{Shot}/finishing/clip/sources/{segment_name}.clip'
    flame_shot_clip:
        definition: 'sequences/{Sequence}/{Shot}/finishing/clip/{Shot}.clip'
    flame_shot_batch:
        definition: 'sequences/{Sequence}/{Shot}/finishing/batch/{Shot}.v{version}.batch'
    flame_shot_render_dpx:
        definition: 'sequences/{Sequence}/{Shot}/finishing/renders/{segment_name}_v{version}/{Shot}_{segment_name}_v{version}.{flame.frame}.dpx'
    flame_shot_render_exr:
        definition: 'sequences/{Sequence}/{Shot}/finishing/renders/{segment_name}_v{version}/{Shot}_{segment_name}_v{version}.{flame.frame}.exr'
    flame_shot_comp_dpx:
        definition: 'sequences/{Sequence}/{Shot}/finishing/comp/{segment_name}_v{version}/{Shot}_{segment_name}_v{version}.{flame.frame}.dpx'
    flame_shot_comp_exr:
        definition: 'sequences/{Sequence}/{Shot}/finishing/comp/{segment_name}_v{version}/{Shot}_{segment_name}_v{version}.{flame.frame}.exr'

    #
    # Photoshop
    #

    # The location of WIP files
    photoshop_shot_work:
        #definition: '@shot_root/work/photoshop/{name}.v{version}.psd'
        definition: '@shot_root/work/photoshop/{Shot}.[{name}.]{Step}.v{version}.psd'
        root_name: 'primary'
    shot_work_area_photoshop:
        definition: '@shot_root/work/photoshop'
        root_name: 'primary'
    # The location of backups of WIP files
    photoshop_shot_snapshot:
        #definition: '@shot_root/work/photoshop/snapshots/{name}.v{version}.{timestamp}.psd'
        definition: '@shot_root/work/photoshop/snapshots/{Shot}.[{name}.]{Step}.v{version}.{timestamp}.psd'
        root_name: 'primary'
    # The location of published files
    shot_publish_area_photoshop:
        definition: '@shot_root/publish/photoshop'
        root_name: 'primary'
    photoshop_shot_publish:
        #definition: '@shot_root/publish/photoshop/{name}.v{version}.psd'
        definition: '@shot_root/publish/photoshop/{Shot}.[{name}.]{Step}.v{version}.psd'
        root_name: 'primary'

    #
    # After Effects
    #
    #TEMP: work/{current_user_name}/maya/{Shot}.[{name}.]{Step}.v{version}.{maya_extension}'
    # The location of WIP files
    aftereffects_shot_work:
        #definition: '@shot_root/work/afx/{name}.{Step}.v{version}.aep'
        #definition: '@shot_root/work/afx/{Shot}.[{name}.]{Step}.v{version}.aep'              # --- user work areas ~DW 2020-01-09
        definition: '@shot_root/work/{current_user_name}/aftereffects/{Shot}.[{name}.]{task_name}.v{version}.aep'
        root_name: 'primary'
    shot_work_area_aftereffects:
        #definition: '@shot_root/work/afx'
        definition: '@shot_root/work/{current_user_name}/aftereffects'
        root_name: 'primary'
    # The location of backups of WIP files
    aftereffects_shot_snapshot:
        #definition: '@shot_root/work/afx/snapshots/{name}.{Step}.v{version}.{timestamp}.aep' # --- user work areas ~DW 2020-01-09
        definition: '@shot_root/work/{current_user_name}/aftereffects/snapshots/{Shot}.[{name}.]{task_name}.v{version}.{timestamp}.aep'
        root_name: 'primary'
    # The location of published files
    shot_publish_area_aftereffects:
        #definition: '@shot_root/publish/afx'                                                 #
        definition: '@shot_root/publish/aftereffects'
        root_name: 'primary'
    aftereffects_shot_publish:
        #definition: '@shot_root/publish/afx/{name}.{Step}.v{version}.aep'
        definition: '@shot_root/publish/aftereffects/{Shot}.[{name}.]{task_name}.v{version}.aep'
        root_name: 'primary'
    aftereffects_shot_render_pub_mono:
        #definition: '@shot_root/publish/elements/{name}/v{version}/{width}x{height}/{Shot}_{name}_{afx.comp}_v{version}.{SEQ}.tif'
        definition: '@sequence_root/renders/{Shot}/2d/v{version}/{Shot}.{task_name}.v{version}.{SEQ}.tif'
        root_name: 'secondary'
    # SSE Custom
    aftereffects_shot_render_exr_aces:
        definition: '@sequence_root/renders/{Shot}/2d/v{version}/{Shot}.{task_name}.v{version}.{SEQ}.exr'
        root_name: 'secondary'    # The following template uses {afx.mov.ext} this is a special key, that will be only there
    # in the beta to support different extensions on mac and windows, while using the same
    # output module (Lossless with Alpha)
    aftereffects_shot_render_movie:
        #definition: '@shot_root/review/{Shot}_{name}_{afx.comp}_v{version}.{afx.mov.ext}'
        definition: '@sequence_root/renders/{Shot}/2d/v{version}/{Shot}.{task_name}.v{version}.{afx.mov.ext}'
        root_name: 'secondary'


    #
    # Maya
    #

    # define the location of a work area
    shot_work_area_maya:
        definition: '@shot_root/work/{current_user_name}/maya'
        root_name: 'primary'
    # define the location of a publish area
    shot_publish_area_maya:
        definition: '@shot_root/publish/maya'
        root_name: 'primary'
    # The location of WIP files
    maya_shot_work:
        #definition: '@shot_root/work/{current_user_name}/maya/{name}.{Step}.v{version}.{maya_extension}'
        # Used {name} key instead of {name_description} because any other key but name would not show a dialogbox in SG Save.
        # TODO: To use {name_description}, we should use a popup dialog in scene_operation_tk-maya.py
        #definition: '@shot_root/work/{current_user_name}/maya/{Shot}.[{name_description}.]{Step}.v{version}.{maya_extension}'
        definition: '@shot_root/work/{current_user_name}/maya/{Shot}.[{name}.]{Step}.v{version}.{maya_extension}'
        root_name: 'primary'
    # The location of backups of WIP files
    maya_shot_snapshot:
        #definition: '@shot_root/work/{current_user_name}/maya/snapshots/{name}.{Step}.v{version}.{timestamp}.{maya_extension}'
        definition: '@shot_root/work/{current_user_name}/maya/snapshots/{Shot}.[{name}.]{Step}.v{version}.{timestamp}.{maya_extension}'
        root_name: 'primary'
    # The location of published maya files
    maya_shot_publish:
        #definition: '@shot_root/publish/maya/{name}.{Step}.v{version}.{maya_extension}'
        definition: '@shot_root/publish/maya/{Shot}.[{name}.]{Step}.v{version}.{maya_extension}'
        root_name: 'primary'
    maya_shot_fbx_publish:
        #definition: '@shot_root/publish/maya/{name}.{Step}.v{version}.{maya_extension}'
        #definition: '@shot_root/publish/maya/{Shot}.[{name}.]{Step}.v{version}.{maya_extension}'
        # We want the ability to publish FBX within the ANIM step and
        # export it to a versioned folder. For example:
        # Root Folder => N:\projects\HoneyBadger\sequences\BB001\BB001A1_0010\ANIM\publish\fbx\v003
        # FBX name => BB001A1_0010_CarpenterPencil_ANIM_v003.fbx (AA 2020-12-18)
        definition: '@shot_root/publish/fbx/v{version}/{Shot}.[{name}.]{Step}.v{version}.fbx'
        root_name: 'primary'

    # >>> from old sg_config
    # Adding from tk-config-simple-master
    # TODO: Should be deprecated because of maya_shot_cache_alembic
    maya_shot_mesh_alembic_cache:
        #definition: '@shot_root/publish/maya/{name}[_{grp_name}].v{version}.abc'
        definition: '@shot_root/publish/maya/{Shot}.[{name}.]{Step}.[{grp_name}].v{version}.abc'
        root_name: 'primary'

    maya_shot_camera:
        #definition: '@shot_root/publish/maya/camera/{name}.v{version}.{maya_extension}'
        definition: '@shot_root/publish/maya/camera/{Shot}.[{name}.]{Step}.v{version}.{maya_extension}'
        root_name: 'primary'

    # additions - to add tk-maya-playblast
    # Added Step to playblast because Anim is not the only team that creates pb
    maya_shot_playblast:
        #definition: '@sequence_root/playblasts/{Shot}/{name}.{Step}.v{version}.mov'
        definition: '@sequence_root/playblasts/{Shot}/{Shot}.[{name}.]{Step}.v{version}.mov'
        root_name: 'secondary'
    # END >>> from old sg_config


    # >>> from old sg_config
    # this is the template path for your rendered images. For this example,
    # I've inserted the camera and layer names into the directory structure.
    # You could also make them part of the file name or both. The version comes
    # from the version of the work file you're publishing from. The name is
    # currently the same as the layer name, but you could make it whatever
    # you want in the scan hook. The SEQ key is a placeholder for the frame
    # numbers. This template represents all frames in the sequence.
    maya_shot_render_folder:
        definition: '@sequence_root/renders/{Shot}/3d/'
        root_name: 'secondary'

    maya_shot_render:
        #definition: '@sequence_root/renders/{name}/3d/{maya.layer_name}/v{version}/{name}.{maya.layer_name}.v{version}.{SEQ}.exr'
        definition: '@sequence_root/renders/{name}/3d/{maya.layer_name}/v{version}/{{Shot}.[{name}.]{Step}.{maya.layer_name}.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    maya_shot_cache_folder:
        definition: '@sequence_root/caches/{Shot}/v{version}/'
        root_name: 'secondary'
    # @Shervin - Why is there a maya_shot_mesh_alembic_cache and maya_shot_cache_alembic?
    maya_shot_cache_alembic:
        #definition: '@sequence_root/caches/{Shot}/alembic/v{version}/{name}_{maya_namespace}.abc'
        definition: '@sequence_root/caches/{Shot}/alembic/v{version}/{Shot}.[{name}.]{Step}.{maya_namespace}.abc'
        root_name: 'secondary'

    # @Shervin - Not sure what Manifests do. Ported over from old sgconfig.
    #            Potentially we can use it for building shots.
    # Manifests
    #
    publish_group_manifest:
        definition: '@shot_root/publish/manifests/{name}.v{version}.json'
        root_name: 'primary'
    # END >>> from old sg_config

    # CFX sim guide curve cache location
    maya_shot_guide_curve_cache_folder:
        definition: '@sequence_root/caches/{Shot}/{Step}/guide_curve_cache/'
        root_name: 'secondary'

    #
    # Houdini
    #

    # define the location of a work area
    shot_work_area_houdini:
        # definition: '@shot_root/work/houdini'
        definition: '@shot_root/work/{current_user_name}/houdini'
        root_name: 'primary'
    # define the location of a publish area
    shot_publish_area_houdini:
        definition: '@shot_root/publish/houdini'
        root_name: 'primary'
    # The location of WIP files
    houdini_shot_work:
        # definition: '@shot_root/work/houdini/{name}.{Step}.v{version}.hip'
        definition: '@shot_work_area_houdini/{Shot}.[{name}.]{Step}.v{version}.hip'
        root_name: 'primary'
    # The location of backups of WIP files
    houdini_shot_snapshot:
        # definition: '@shot_root/work/houdini/snapshots/{name}.{Step}.v{version}.{timestamp}.hip'
        definition: '@shot_work_area_houdini/snapshots/{Shot}.[{name}.]{Step}.v{version}.{timestamp}.hip'
        root_name: 'primary'
    # The location of published houdini files
    houdini_shot_publish:
        # definition: '@shot_root/publish/houdini/{name}.{Step}.v{version}.hip'
        definition: '@shot_publish_area_houdini/{Shot}.[{name}.]{Step}.v{version}.hip'
        root_name: 'primary'
    
    # Houdini review files - flibbpoks aka playblast
    houdini_shot_review:
        #definition: "@shot_work_area_houdini/version/{Shot}/{Shot}_{Step}_v{version}.mov"
        definition: '@sequence_root/flipbooks/{Shot}/{Shot}.[{name}.]{Step}.v{version}.mov'
        # using equivalent definition from maya step 
        root_name: 'secondary'

    # @Shervin - Discuss with FX, Change alembic, render and mantra paths to secondary
    # Alembic caches
    houdini_shot_work_alembic_cache:
        #definition: '@shot_root/work/houdini/cache/alembic/{name}/{houdini.node}/v{version}/{Shot}_{name}_v{version}_{node}.abc'
        # definition: '@sequence_root/caches/{name}/{Step}/houdini/alembic/{houdini.node}/{name}.{houdini.node}.v{version}.abc'
        definition: '@sequence_root/caches/{name}/{Step}/houdini/alembic/{houdini.node}/{Shot}.[{name}.]{houdini.node}.v{version}.abc'
        root_name: 'secondary'
    # Rendered images
    houdini_shot_render:
        #definition: '@shot_root/work/images/{name}/{houdini.node}/v{version}/{width}x{height}/{Shot}_{name}_v{version}.{SEQ}.exr'
        # definition: '@sequence_root/renders/{name}/3d/houdini/v{version}/{houdini.node}/{name}.{houdini.node}.v{version}.{SEQ}.exr'
        definition: '@sequence_root/renders/{name}/3d/houdini/v{version}/{houdini.node}/{Shot}.[{name}.]{houdini.node}.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    # Additional mantra outputs
    houdini_shot_ifd:
        definition: '@shot_root/work/ifds/{name}/{houdini.node}/v{version}/{width}x{height}/{Shot}_{name}_v{version}.{SEQ}.ifd'

    houdini_shot_dcm:
        definition: '@shot_root/work/dcms/{name}/{houdini.node}/v{version}/{width}x{height}/{Shot}_{name}_v{version}.{SEQ}.dcm'

    houdini_shot_extra_plane:
        definition: '@shot_root/work/images/{name}/{houdini.node}/{aov_name}/v{version}/{width}x{height}/{Shot}_{name}_v{version}.{SEQ}.exr'


    #
    # 3dsmax
    #

    # define the location of a work area
    shot_work_area_max:
        definition: '@shot_root/work/3dsmax'
    # define the location of a publish area
    shot_publish_area_max:
        definition: '@shot_root/publish/3dsmax'
    # The location of WIP files
    max_shot_work:
        definition: '@shot_root/work/3dsmax/{name}.v{version}.max'
    # The location of backups of WIP files
    max_shot_snapshot:
        definition: '@shot_root/work/3dsmax/snapshots/{name}.v{version}.{timestamp}.max'
    # The location of published max files
    max_shot_publish:
        definition: '@shot_root/publish/3dsmax/{name}.v{version}.max'


    #
    # Motionbuilder
    #

    # define the location of a work area
    shot_work_area_mobu:
        definition: '@shot_root/work/mobu'
        root_name: 'primary'
    # define the location of a publish area
    shot_publish_area_mobu:
        definition: '@shot_root/publish/mobu'
        root_name: 'primary'
    # The location of WIP files
    mobu_shot_work:
        definition: '@shot_root/work/mobu/{name}.{Step}.v{version}.fbx'
        root_name: 'primary'
    # The location of backups of WIP files
    mobu_shot_snapshot:
        definition: '@shot_root/work/mobu/snapshots/{name}.{Step}.v{version}.{timestamp}.fbx'
        root_name: 'primary'
    # The location of published mobu files
    mobu_shot_publish:
        definition: '@shot_root/publish/mobu/{name}.{Step}.v{version}.fbx'
        root_name: 'primary'

    #
    # Nuke
    #

    # define the location of a work area
    shot_work_area_nuke:
        definition: '@shot_root/work/{current_user_name}/nuke'
        root_name: 'primary'
    # define the location of a publish area
    shot_publish_area_nuke:
        definition: '@shot_root/publish/nuke'
        root_name: 'primary'
    # The location of WIP script files
    nuke_shot_work:
        definition: '@shot_work_area_nuke/{Shot}.{task_name}.v{version}.nk'
        root_name: 'primary'
    # The location of backups of WIP files
    nuke_shot_snapshot:
        definition: '@shot_work_area_nuke/snapshots/{Shot}.{task_name}.v{version}.{timestamp}.nk'
        root_name: 'primary'
    # The location of published nuke script files
    nuke_shot_publish:
        definition: '@shot_publish_area_nuke/{Shot}.{task_name}.v{version}.nk'
        root_name: 'primary'

    # write node outputs

    # START >>> from old sg_config
    nuke_shot_render_mono_dpx:
        definition: '@sequence_root/renders/{Shot}/2d/v{version}/{name}.{nuke.output}.v{version}.{SEQ}.dpx'
        root_name: 'secondary'
    nuke_shot_render_pub_mono_dpx:
        definition: '@sequence_root/publish/elements/{name}/v{version}/{width}x{height}/{Shot}.{name}.{nuke.output}.v{version}.{SEQ}.dpx'
        root_name: 'primary'
    nuke_shot_render_stereo:
        definition: '@sequence_root/renders/{Shot}/2d/v{version}/{name}.{nuke.output}.{eye}.{Step}.v{version}.{SEQ}.exr'
        root_name: 'secondary'
    nuke_shot_render_pub_stereo:
        definition: '@sequence_root/to_online/{Shot}/publish/{width}x{height}/{name}.{nuke.output}.{eye}.{Step}.v{version}.{SEQ}.exr'
        root_name: 'secondary'
    # END >>> from old sg_config

    # Generic SHOT - ACEScg
    nuke_shot_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/{task_name}/v{version}/{Shot}.{task_name}.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'
    nuke_shot_render_acescg_pub_exr:
        definition: '@sequence_root/to_online/{Shot}/publish/{Shot}.{task_name}.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    # COMP - default (no-colorspace info in filename)
    #      - notes:
    #        - 'Comp' task is hard-coded to make this template path unique.
    #        - Since all write nodes are visible for every task in nuke, the sg context is useless
    #          to get the correct task name. (eg. Artist can pick 'Light' write node for a 'Comp' task)
    #        - To avoid renders going to wrong path locations... must hard-code task_name in for now.
    nuke_shot_comp_render_exr:
        definition: '@sequence_root/renders/{Shot}/2d/v{version}/{Shot}.Comp.v{version}.{SEQ}.exr'
        root_name: 'secondary'
    nuke_shot_comp_render_pub_exr:
        definition: '@sequence_root/to_online/{Shot}/publish/{Shot}.Comp.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    # COMP - ACEScg
    nuke_shot_comp_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/2d/v{version}/{Shot}.Comp.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    # LIGHT - ACEScg (slapcomp)
    nuke_shot_light_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/3d/lt_slap_comps/v{version}/{Shot}.Light.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    # FX - ACEScg (slapcomp)
    nuke_shot_fxrnd_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/3d/fx_slap_comps/v{version}/{Shot}.FX-RnD.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    # ROTO - ACEScg
    nuke_shot_roto_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/roto/v{version}/{Shot}.Roto.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    # DEGRAIN - srgb
    nuke_shot_degrain_render_srgb_exr:
        definition: '@sequence_root/plates/{Shot}/degrain/v{version}/{Shot}.[{name}.]degrain.{nuke.output}.srgb.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    nuke_shot_degrain_render_srgb_pub_exr:
        definition: '@sequence_root/to_online/{Shot}/publish/{Shot}.[{name}.]degrain.{nuke.output}.v{version}.srgb.{SEQ}.exr'
        root_name: 'secondary'
        
    nuke_shot_degrainpre_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/pre/Degrain/v{version}/{Shot}.Degrain.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    # PLATES
    external_plates:
        definition: '@sequence_root/plates/{Shot}/external/'
        root_name: 'secondary'

    acescg_plates:
        definition: '@sequence_root/plates/{Shot}/acescg/acescg.{SEQ}.exr'
        root_name: 'secondary'

    resolve_graded_plates:
        definition: '@sequence_root/plates/{Shot}/graded_plates/'
        
    nuke_shot_cleanplatepre_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/pre/CleanPlate/v{version}/{Shot}.CleanPlate.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'
        
    # SMART VECTOR
    nuke_shot_smartvectorpre_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/pre/smartVector/v{version}/{Shot}.smartVector.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    # review output
    shot_quicktime_quick:
        definition: '@shot_root/review/quickdaily/{Shot}.{task_name}.{iteration}.mov'
    nuke_shot_render_movie:
        definition: '@shot_root/review/{Shot}.{task_name}.[{nuke.output}.]v{version}.mov'

    # MULTI-CHANNEL MATTES
    # - various output directories for multi-channel mattes
    # - allows for many different use cases
    nuke_output_matte_root:
        definition: '@sequence_root/renders/{Shot}/matte'
        root_name: 'secondary'
    nuke_output_rgb_matte_exr:
        definition: '@nuke_output_matte_root/{Step}_matte/v{version}/{Shot}.{Step}.MATTE.{SEQ}.exr'
        root_name: 'secondary'
    nuke_output_rgb_matte_acescg_exr:
        definition: '@nuke_output_matte_root/{Step}_matte/v{version}/{Shot}.{Step}.MATTE.acescg.{SEQ}.exr'
        root_name: 'secondary'
    
    # PRE-RENDER
    # - todo: instead of having fixed naming, find a way to allow the user to 
    #         enter a name on the nuke sg write nodes. This would replaced
    #         the 'prerender1', 'prerender2', etc.
    nuke_shot_prerender1_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/pre/preRender1/v{version}/{Shot}.preRender1.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'
    nuke_shot_prerender2_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/pre/preRender2/v{version}/{Shot}.preRender2.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'
    nuke_shot_prerender3_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/pre/preRender3/v{version}/{Shot}.preRender3.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'
    nuke_shot_prerender4_render_acescg_exr:
        definition: '@sequence_root/renders/{Shot}/pre/preRender4/v{version}/{Shot}.preRender4.acescg.v{version}.{SEQ}.exr'
        root_name: 'secondary'

    #
    # Hiero
    #

    # export of shot asset data from hiero
    hiero_plate_path:
        definition: '@sequence_root/{Shot}/editorial/{YYYY}_{MM}_{DD}/plates/{project}_{Shot}.mov'
        root_name: 'primary'
    hiero_render_path:
        definition: '@sequence_root/{Shot}/editorial/{YYYY}_{MM}_{DD}/renders/{project}_{Shot}.{SEQ}.dpx'
        root_name: 'primary'

    # --------------------------------------- #
    # --- SSE adds below (-DW 2020-02-04) --- #
    # --------------------------------------- #
    #
    # Natron
    #

    # define the location of a work area
    shot_work_area_natron:
        #definition: '@shot_root/work/natron'
        definition: '@shot_root/work/{current_user_name}/natron'                                       # --- user work areas ~DW 2020-02-07
        root_name: 'primary'
    # define the location of a publish area
    shot_publish_area_natron:
        definition: '@shot_root/publish/natron'
        root_name: 'primary'
    # The location of WIP script files
    natron_shot_work:
        #definition: '@shot_root/work/natron/{name}.v{version}.ntp'
        definition: '@shot_root/work/{current_user_name}/natron/{Shot}.[{name}.]{Step}.v{version}.ntp' # --- user work areas ~DW 2020-02-07
        root_name: 'primary'
    # The location of backups of WIP files
    natron_shot_snapshot:
        definition: '@shot_root/work/natron/snapshots/{name}.v{version}.{timestamp}.ntp'
        root_name: 'primary'
    # The location of published natron script files
    natron_shot_publish:
        definition: '@shot_root/publish/natron/{Shot}.[{name}.]{Step}.v{version}.ntp'
        root_name: 'primary'
    # write node outputs
    natron_shot_render_mono_dpx:
        definition: '@shot_root/work/images/{name}/v{version}/{width}x{height}/{Shot}_{name}_{natron.output}_v{version}.{SEQ}.dpx'
        root_name: 'primary'
    natron_shot_render_pub_mono_dpx:
        definition: '@shot_root/publish/elements/{name}/v{version}/{width}x{height}/{Shot}_{name}_{natron.output}_v{version}.{SEQ}.dpx'
        root_name: 'primary'
    natron_shot_render_stereo:
        definition: '@shot_root/work/images/{name}/v{version}/{width}x{height}/{Shot}_{name}_{natron.output}_{eye}_v{version}.{SEQ}.exr'
        root_name: 'primary'
    natron_shot_render_pub_stereo:
        definition: '@shot_root/publish/elements/{name}/v{version}/{width}x{height}/{Shot}_{name}_{natron.output}_{eye}_v{version}.{SEQ}.exr'
        root_name: 'primary'
    # review output
    shot_quicktime_quick:
        definition: '@shot_root/review/quickdaily/{Shot}_{name}_{iteration}.mov'
        root_name: 'primary'
    natron_shot_render_movie:
        definition: '@shot_root/review/{Shot}_{name}_v{version}.mov'
        root_name: 'primary'

    #
    # Unreal
    #

    # level sequence review output from unreal
    unreal_movie_publish:
        definition: '[sequences/{Sequence}/][{Shot}/]editorial/{YYYY}_{MM}_{DD}/unreal/{level_sequence}_{world}.v{version}.avi'
    unreal_shot_publish:
        definition: '@shot_root/publish/unreal/{name}.v{version}.nk'

    ##########################################################################################
    # Asset pipeline


    #
    # Alembic caches
    #

    asset_alembic_cache:
        #definition: '@asset_root/publish/caches/{name}.v{version}.abc'
        definition: '@asset_root/publish/caches/{Asset}.[{name}.]{Step}.v{version}.abc'
        root_name: 'primary'

    asset_fur_cache:
        definition: '@asset_root/publish/caches/fur/{Asset}.{name}.GRM.v{version}.abc'
        root_name: 'primary'

    asset_arnold_standin:
        #definition: '@asset_root/publish/ass/{name}.ass'
        definition: '@asset_root/publish/ass/{Asset}.[{name}.]{Step}.v{version}.ass'
        root_name: 'primary'

    asset_arnold_standin_surfacing:
        definition: '@asset_root/publish/ass/{Asset}.[{name}.]SUR.AI.v{version}.ass'
        root_name: 'primary'

    asset_publish_tex_list:
        # Publishing against a simple json file (DW 2020-09-21)
        definition: '@asset_root/publish/json/{Asset}.[{name}.]{Step}.v{version}.textures.json'
        root_name: 'primary'

    #
    # Photoshop
    #

    # The location of WIP files
    photoshop_asset_work:
        definition: '@asset_root/work/photoshop/{name}.v{version}.psd'
        root_name: 'primary'
    asset_work_area_photoshop:
        definition: '@asset_root/work/photoshop'
        root_name: 'primary'
    # The location of backups of WIP files
    photoshop_asset_snapshot:
        definition: '@asset_root/work/photoshop/snapshots/{name}.v{version}.{timestamp}.psd'
        root_name: 'primary'
    # The location of published files
    asset_publish_area_photoshop:
        definition: '@asset_root/publish/photoshop'
        root_name: 'primary'
    photoshop_asset_publish:
        definition: '@asset_root/publish/photoshop/{name}.v{version}.psd'
        root_name: 'primary'

    #
    # after effects
    #

    # The location of WIP files
    aftereffects_asset_work:
        definition: '@asset_root/work/afx/{name}.v{version}.aep'
        root_name: 'primary'
    asset_work_area_aftereffects:
        definition: '@asset_root/work/afx'
        root_name: 'primary'
    # The location of backups of WIP files
    aftereffects_asset_snapshot:
        definition: '@asset_root/work/afx/snapshots/{name}.v{version}.{timestamp}.aep'
        root_name: 'primary'
    # The location of published files
    asset_publish_area_aftereffects:
        definition: '@asset_root/publish/afx'
        root_name: 'primary'
    aftereffects_asset_publish:
        definition: '@asset_root/publish/afx/{name}.v{version}.aep'
        root_name: 'primary'
    aftereffects_asset_render_pub_mono:
        definition: '@asset_root/publish/elements/{name}/v{version}/{width}x{height}/{Asset}_{name}_{afx.comp}_v{version}.{SEQ}.tif'
        root_name: 'primary'
    # The following template uses {afx.mov.ext} this is a special key, that will be only there
    # in the beta to support different extensions on mac and windows, while using the same
    # output module (Lossless with Alpha)
    aftereffects_asset_render_movie:
        definition: '@asset_root/review/{Asset}_{name}_{afx.comp}_v{version}.{afx.mov.ext}'
        root_name: 'primary'


    #
    # Mari
    #
    asset_mari_texture_tif:
        definition: '@asset_root/publish/mari/{name}_{mari.channel}[_{mari.layer}].v{version}.{UDIM}.tif'
        root_name: 'primary'

    #
    # Maya
    #

    # define the location of a work area
    asset_work_area_maya:
        definition: '@asset_root/work/{current_user_name}/maya'
        root_name: 'primary'
    # define the location of a publish area
    asset_publish_area_maya:
        definition: '@asset_root/publish/maya'
        root_name: 'primary'
    # The location of WIP files
    maya_asset_work:
        #definition: '@asset_root/work/{current_user_name}/maya/{name}.{Step}.v{version}.{maya_extension}'
        definition: '@asset_work_area_maya/{Asset}.[{name}.]{Step}.v{version}.{maya_extension}'
        root_name: 'primary'
    # The location of backups of WIP files
    maya_asset_snapshot:
        #definition: '@asset_root/work/{current_user_name}/maya/snapshots/{name}.{Step}.v{version}.{timestamp}.{maya_extension}'
        definition: '@asset_work_area_maya/snapshots/{Asset}.[{name}.]{Step}.v{version}.{timestamp}.{maya_extension}'
        root_name: 'primary'
    # The location of published maya files
    maya_asset_publish:
        #definition: '@asset_root/publish/maya/{name}.v{version}.{maya_extension}'
        definition: '@asset_publish_area_maya/{Asset}.[{name}.]{Step}.v{version}.{maya_extension}'
        root_name: 'primary'

    # --- SSE: Custom for Surfacing (-DW 2020-04-08)
    maya_asset_work_surfacing_arnold:
        definition: '@asset_work_area_maya/{Asset}.[{name}.]SUR.AI.v{version}.ma'
        root_name: 'primary'
    maya_asset_snapshot_surfacing_arnold:
        definition: '@asset_work_area_maya/snapshots/{Asset}.[{name}.]SUR.AI.v{version}.{timestamp}.ma'
        root_name: 'primary'
    maya_asset_publish_surfacing_arnold:
        definition: '@asset_publish_area_maya/{Asset}.[{name}.]SUR.AI.v{version}.ma'
        root_name: 'primary'
    maya_asset_publish_surfacing_arnold_shadernetwork:
        definition: '@asset_publish_area_maya/{Asset}.[{name}.]SHD.AI.v{version}.ma'
        root_name: 'primary'
    maya_asset_work_render:
        definition: 'assets/{sg_asset_type}/renders/{Asset}/{Step}/{current_user_name}/turntable/v{version}/{Asset}.{SEQ}.exr'
        root_name: 'secondary'

    # The location of FBX exports for Unreal
    maya_asset_fbx_publish:
        # definition: '@asset_root/publish/fbx/{name}.v{version}.fbx'
        definition: '@asset_root/publish/fbx/{Asset}.[{name}.]{Step}.v{version}.fbx'
        root_name: 'primary'
    # The location of turntable review output rendered in Unreal
    maya_ue4_turntable_render:
        # definition: '@asset_root/work/images/{name}_turntable_v{version}.avi'
        definition: '@asset_root/work/{current_user_name}/images/{Asset}[_{name}]_turntable_v{version}.avi'
        root_name: 'primary'
    maya_ue4_turntable_publish:
        # definition: '@asset_root/review/{Asset}_{name}_turntable_v{version}.avi'
        definition: '@asset_root/review/{Asset}[_{name}]_turntable_v{version}.avi'
        root_name: 'primary'

    # >>> from old sg_config
    # The location where maya shader networks are stored on disk
    # maya_asset_shader_network:
    #     #definition: '@asset_root/publish/maya/surfacing/{name}.v{version}.{maya_extension}'
    #     definition: '@asset_root/publish/maya/surfacing/{Asset}.[{name}.]v{version}.{maya_extension}'
    #     root_name: 'primary'
    # END >>> from old sg_config

    #
    # Houdini
    #

    # define the location of a work area
    asset_work_area_houdini:
        # definition: '@asset_root/work/houdini'
        definition: '@asset_root/work/{current_user_name}/houdini'
        root_name: 'primary'
    # define the location of a publish area
    asset_publish_area_houdini:
        definition: '@asset_root/publish/houdini'
        root_name: 'primary'
    # The location of WIP files
    houdini_asset_work:
        # definition: '@asset_root/work/houdini/{name}.v{version}.hip'
        definition: '@asset_root/work/{current_user_name}/houdini/{Asset}.[{name}.]{Step}.v{version}.hip'
        root_name: 'primary'
    # The location of backups of WIP files
    houdini_asset_snapshot:
        # definition: '@asset_root/work/houdini/snapshots/{name}.v{version}.{timestamp}.hip'
        definition: '@asset_root/work/{current_user_name}/houdini/snapshots/{Asset}.[{name}.]{Step}.v{version}.{timestamp}.hip'
        root_name: 'primary'
    # The location of published houdini files
    houdini_asset_publish:
        definition: '@asset_root/publish/houdini/{Asset}.[{name}.]{Step}.v{version}.hip'
        root_name: 'primary'
    # Houdini rewiew files
    houdini_asset_review:
        definition: '@asset_root/flipbooks/{Asset}/{Asset}.[{name}.]{Step}.v{version}.mov'
        # using equivalent definition from maya step - is there any maya asset versioning
        root_name: 'secondary'

    # Alembic caches
    houdini_asset_work_alembic_cache:
        # definition: '@asset_root/{Step}/work/{current_user_name}/houdini/cache/alembic/{houdini.node}/{Asset}_{name}_{houdini.node}.v{version}.abc'
        definition: '@asset_root/{Step}/work/{current_user_name}/houdini/cache/alembic/{houdini.node}/{Asset}.[{name}.]{houdini.node}.v{version}.abc'
        root_name: 'primary'

    # Rendered images
    houdini_asset_render:
        # definition: '@asset_root/work/images/{name}/{houdini.node}/v{version}/{width}x{height}/{Asset}_{name}.v{version}.{SEQ}.exr'
        definition: '@asset_root/work/{current_user_name}/images/{name}/v{version}/{width}x{height}/{Asset}.[{name}.]v{version}.{SEQ}.exr'
        root_name: 'primary'

    # Additional mantra outputs
    houdini_asset_ifd:
        definition: '@asset_root/work/ifds/{name}/{houdini.node}/v{version}/{width}x{height}/{Asset}_{name}_v{version}.{SEQ}.ifd'
        root_name: 'primary'

    houdini_asset_dcm:
        definition: '@asset_root/work/dcms/{name}/{houdini.node}/v{version}/{width}x{height}/{Asset}_{name}_v{version}.{SEQ}.dcm'
        root_name: 'primary'

    houdini_asset_extra_plane:
        definition: '@asset_root/work/images/{name}/{houdini.node}/{aov_name}/v{version}/{width}x{height}/{Asset}_{name}_v{version}.{SEQ}.exr'
        root_name: 'primary'


    #
    # 3dsmax
    #

    # define the location of a work area
    asset_work_area_max:
        definition: '@asset_root/work/3dsmax'
    # define the location of a publish area
    asset_publish_area_max:
        definition: '@asset_root/publish/3dsmax'
    # The location of WIP files
    max_asset_work:
        definition: '@asset_root/work/3dsmax/{name}.v{version}.max'
    # The location of backups of WIP files
    max_asset_snapshot:
        definition: '@asset_root/work/3dsmax/snapshots/{name}.v{version}.{timestamp}.max'
    # The location of published max files
    max_asset_publish:
        definition: '@asset_root/publish/3dsmax/{name}.v{version}.max'


    #
    # Motionbuilder
    #

    # define the location of a work area
    asset_work_area_mobu:
        definition: '@asset_root/work/mobu'
    # define the location of a publish area
    asset_publish_area_mobu:
        definition: '@asset_root/publish/mobu'
    # The location of WIP files
    mobu_asset_work:
        definition: '@asset_root/work/mobu/{name}.v{version}.fbx'
    # The location of backups of WIP files
    mobu_asset_snapshot:
        definition: '@asset_root/work/mobu/snapshots/{name}.v{version}.{timestamp}.fbx'
    # The location of published Motionbuilder files
    mobu_asset_publish:
        definition: '@asset_root/publish/mobu/{name}.v{version}.fbx'


    #
    # Nuke
    #

    # define the location of a work area
    asset_work_area_nuke:
        definition: '@asset_root/work/nuke'
        root_name: 'primary'
    # define the location of a publish area
    asset_publish_area_nuke:
        definition: '@asset_root/publish'
        root_name: 'primary'
    # outputs from the Shotgun Write Node for assets
    nuke_asset_render:
        definition: '@asset_root/work/images/{name}/v{version}/{width}x{height}/{Asset}_{name}_{nuke.output}_v{version}.{SEQ}.exr'
        root_name: 'primary'
    nuke_asset_render_pub:
        definition: '@asset_root/publish/elements/{name}/v{version}/{width}x{height}/{Asset}_{name}_{nuke.output}_v{version}.{SEQ}.exr'
        root_name: 'primary'
    # review output
    nuke_asset_render_movie:
        definition: '@asset_root/review/{Asset}_{name}_{nuke.output}_v{version}.mov'
        root_name: 'primary'
    asset_quicktime_quick:
        definition: '@asset_root/review/quickdaily/{Asset}_{name}_{iteration}.mov'
        root_name: 'primary'
    # The location of WIP script files
    nuke_asset_work:
        definition: '@asset_root/work/nuke/{name}.v{version}.nk'
        root_name: 'primary'
    # The location of backups of WIP files
    nuke_asset_snapshot:
        definition: '@asset_root/work/nuke/snapshots/{name}.v{version}.{timestamp}.nk'
        root_name: 'primary'
    # The location of published nuke script files
    nuke_asset_publish:
        definition: '@asset_root/publish/nuke/{name}.v{version}.nk'
        root_name: 'primary'

    #
    # Alias
    #

    # define the location of a work area
    asset_work_area_alias:
        definition: '@asset_root/work/alias'
    # define the location of a publish area
    asset_publish_area_alias:
        definition: '@asset_root/publish/alias'
    # The location of WIP files
    alias_asset_work:
        definition: '@asset_root/work/alias/{name}.v{version}.wire'
    # The location of backups of WIP files
    alias_asset_snapshot:
        definition: '@asset_root/work/alias/snapshots/{name}.v{version}.{timestamp}.wire'
    # The location of published Alias files
    alias_asset_publish:
        definition: '@asset_root/publish/alias/{name}.v{version}.wire'

    # Alias translations

    # The location of the reference created on the fly by Alias when importing a file as ref
    alias_asset_reference_publish:
        definition: '@asset_root/publish/alias/translations/{name}_{alias.extension}.v{version}.wref'
    alias_asset_igs_publish:
        definition: '@asset_root/publish/alias/translations/{name}.v{version}.igs'
    alias_asset_catpart_publish:
        definition: '@asset_root/publish/alias/translations/{name}.v{version}.CATPart'
    alias_asset_jt_publish:
        definition: '@asset_root/publish/alias/translations/{name}.v{version}.jt'
    alias_asset_stp_publish:
        definition: '@asset_root/publish/alias/translations/{name}.v{version}.stp'
    alias_asset_wref_publish:
        definition: '@asset_root/publish/alias/translations/{name}.v{version}.wref'

    #
    # VRED
    #

    # define the location of a work area
    asset_work_area_vred:
        definition: '@asset_root/work/vred'
    # define the location of a publish area
    asset_publish_area_vred:
        definition: '@asset_root/publish/vred'
    # The location of WIP files
    vred_asset_work:
        definition: '@asset_root/work/vred/{name}.v{version}.vpb'
    # The location of backups of WIP files
    vred_asset_snapshot:
        definition: '@asset_root/work/vred/snapshots/{name}.v{version}.{timestamp}.vpb'
    # The location of published VRED files
    vred_asset_publish:
        definition: '@asset_root/publish/vred/{name}.v{version}.vpb'

    # define the location of VRED geometry published files
    vred_asset_geometry_publish:
        definition: '@asset_root/publish/vred/geometry/{name}.v{version}.osb'

    # define the location of the WIP render images
    vred_asset_render_work:
        definition: '@asset_root/work/images/{name}/v{version}/{Asset}_{name}_v{version}[-{vred.render_pass}].{vred.render_extension}'

    # define the location of the WIP renderings for an image sequence
    vred_asset_render_sequence_work:
        definition: '@asset_root/work/images/{name}/v{version}/{Asset}_{name}_v{version}[-{vred.render_pass}]-{vred.frame}.{vred.render_extension}'

    # define the location of the published render images
    vred_asset_render_publish:
        definition: '@asset_root/publish/images/{name}/v{version}/{Asset}_{name}_v{version}[-{vred.render_pass}].{vred.render_extension}'

    # define the location of the published renderings for an image sequence
    vred_asset_render_sequence_publish:
        definition: '@asset_root/publish/images/{name}/v{version}/{Asset}_{name}_v{version}[-{vred.render_pass}]-{vred.frame}.{vred.render_extension}'

    #
    # Unreal
    #

    # Placeholder location for static mesh assets exported from Unreal
    # Hook implementation intended to be a starting point for a pipeline
    # No context info used in template, developers expected to further customize
    unreal_asset_publish:
        #definition: 'assets/unrealdemo/exports/{YYYY}_{MM}_{DD}/{name}.fbx'
        # SSE temp customize - TODO: create unreal/exports in Schema and change this path
        definition: '@asset_root/work/{current_user_name}/exports/{YYYY}_{MM}_{DD}/{name}.fbx'
        root_name: 'primary'

    # --------------------------------------- #
    # --- SSE adds below (-DW 2020-02-04) --- #
    # --------------------------------------- #
    #
    # ZBrush Ztools
    #

    # NOTE: This is an SSE add, doing ZTL Publishes for Shotgun would
    #       require some development effort, getting the Asset pathing
    #       in here for now (-DW 2020-02-03)
    # NOTE2: Purely dev to future-proof when SG ZBrush Engine is released.
    # define the location of a work area
    asset_work_area_zbrush:
        definition: '@asset_root/work/{current_user_name}/zbrush/ztool'
        root_name: 'primary'
    # define the location of a publish area
    asset_publish_area_zbrush:
        definition: '@asset_root/publish/zbrush/ztool'
        root_name: 'primary'
    # The location of WIP files
    zbrush_asset_work:
        definition: '@asset_root/work/{current_user_name}/zbrush/ztool/{Asset}.[{name}.]{Step}.v{version}.ztl'
        root_name: 'primary'
    # The location of backups of WIP files
    zbrush_asset_snapshot:
        definition: '@asset_root/work/{current_user_name}/zbrush/ztool/snapshots/{Asset}.[{name}.]{Step}.v{version}.{timestamp}.ztl'
        root_name: 'primary'
    # The location of published ZBrush Ztool files
    zbrush_asset_publish:
        definition: '@asset_root/publish/zbrush/ztool/{Asset}.[{name}.]{Step}.v{version}.ztl'
        root_name: 'primary'

    #
    # Natron
    #

    # define the location of a work area
    asset_work_area_natron:
        definition: '@asset_root/work/natron'
        root_name: 'primary'
    # define the location of a publish area
    asset_publish_area_natron:
        definition: '@asset_root/publish/natron'
        root_name: 'primary'
    # The location of WIP script files
    natron_asset_work:
        definition: '@asset_root/work/natron/{name}.v{version}.ntp'
        root_name: 'primary'
    # The location of backups of WIP files
    natron_asset_snapshot:
        definition: '@asset_root/work/natron/snapshots/{name}.v{version}.{timestamp}.ntp'
        root_name: 'primary'
    # The location of published natron script files
    natron_asset_publish:
        definition: '@asset_root/publish/natron/{name}.v{version}.ntp'
        root_name: 'primary'
    # write node outputs
    natron_asset_render_mono_dpx:
        definition: '@asset_root/work/images/{name}/v{version}/{width}x{height}/{Shot}_{name}_{natron.output}_v{version}.{SEQ}.dpx'
        root_name: 'primary'
    natron_asset_render_pub_mono_dpx:
        definition: '@asset_root/publish/elements/{name}/v{version}/{width}x{height}/{Shot}_{name}_{natron.output}_v{version}.{SEQ}.dpx'
        root_name: 'primary'
    natron_asset_render_stereo:
        definition: '@asset_root/work/images/{name}/v{version}/{width}x{height}/{Shot}_{name}_{natron.output}_{eye}_v{version}.{SEQ}.exr'
        root_name: 'primary'
    natron_asset_render_pub_stereo:
        definition: '@asset_root/publish/elements/{name}/v{version}/{width}x{height}/{Shot}_{name}_{natron.output}_{eye}_v{version}.{SEQ}.exr'
        root_name: 'primary'
    # review output
    asset_quicktime_quick:
        definition: '@asset_root/review/quickdaily/{Shot}_{name}_{iteration}.mov'
        root_name: 'primary'
    natron_asset_render_movie:
        definition: '@asset_root/review/{Shot}_{name}_v{version}.mov'
        root_name: 'primary'


#
# The strings section is similar to the paths section - but rather than defining paths
# on disk, it contains a list of strings. Strings are typically used when you want to be
# able to configure the way data is written to shotgun - it may be the name field for a
# review version or the formatting of a publish.
#

strings:

    # when a review Version in Shotgun is created inside of Nuke, this is the
    # name that is being given to it (the code field)
    nuke_shot_version_name: "{Shot}_{name}_{nuke.output}_v{version}.{iteration}"
    nuke_quick_shot_version_name: "{Shot}_{name}_quick_{iteration}"

    nuke_asset_version_name: "{Asset}_{name}_{nuke.output}_v{version}.{iteration}"
    nuke_quick_asset_version_name: "{Asset}_{name}_quick_{iteration}"

    # defines how the {tk_version} token in Hiero gets formatted back to tk.
    hiero_version: "{version}"

    # define how new Mari projects should be named
    mari_asset_project_name: "{mari.project_name} - Asset {asset_name}, {task_name}"

    # entity-specific templates for importing files into the Unreal content browser
    # template logic is defined in Python, not settings:
    # tk-unreal/hooks/tk-multi-loader2/tk-unreal_actions.py
    unreal_loader_asset_path: "/Game/Assets/{sg_asset_type_ue4}/{sg_asset_name}/"
    unreal_loader_asset_name: "{sg_asset_name}_{name}"
    unreal_loader_shot_path: "/Game/Cinematics/Sequences/{sg_sequence_name}/{sg_shot_name}/"
    unreal_loader_shot_name: "{sg_shot_name}_{name}"
    unreal_loader_project_path: "/Game/Assets/"
    unreal_loader_project_name: "{name}"
